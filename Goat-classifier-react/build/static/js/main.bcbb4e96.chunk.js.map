{"version":3,"sources":["components/ResultPage.js","components/LandingPage.js","components/GoatClassifier.js","serviceWorker.js","index.js"],"names":["React","require","ResultPage","className","this","props","result","Component","LandingPage","image","results","img","src","currentStep","class","type","disabled","role","aria-hidden","response","name","id","onChange","handleChange","for","GoatClassifier","state","fetchResult","console","log","formData","FormData","append","img_file","fetch","method","body","then","resp","json","data","setState","event","target","files","img_obj","URL","createObjectURL","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qRACIA,G,YAAQC,EAAQ,IAyBLC,E,uKArBP,OACI,uBAAKC,UAAU,aACX,uBAAKA,UAAU,wBACX,uBAAKA,UAAU,8BAAf,wBAAkEC,KAAKC,MAAMC,OAAX,WAEtE,uBAAKH,UAAU,8BACX,uBAAKA,UAAU,iCAAf,iCAGA,uBAAKA,UAAU,2BAAf,WACaC,KAAKC,MAAMC,OAAX,cAEb,uBAAKH,UAAU,2BAAf,WACaC,KAAKC,MAAMC,OAAX,oB,GAfRN,EAAMO,WCD3BP,EAAQC,EAAQ,GAqDLO,E,uKAhDP,IAAIC,EAAOC,EAqBX,OAnBID,EADAL,KAAKC,MAAMM,IACH,uBAAKR,UAAU,OAAM,uBAAKA,UAAU,qBAAoB,uBAAKS,IAAKR,KAAKC,MAAMM,IAAKR,UAAU,+BAE5F,uBAAKA,UAAU,QAGvBO,EAD0B,GAA1BN,KAAKC,MAAMQ,YAEP,uBAAKV,UAAU,eACX,uBAAKA,UAAU,qBACX,0BAAQW,MAAM,kBAAkBC,KAAK,SAASC,UAAQ,GAClD,wBAAMF,MAAM,mCAAmCG,KAAK,SAASC,cAAY,SAD7E,oBAMqB,GAA1Bd,KAAKC,MAAMQ,YACR,gBAAC,EAAD,CAAYP,OAAQF,KAAKC,MAAMc,WAE/B,4BAGV,uBAAKhB,UAAU,aACX,uBAAKA,UAAU,OACX,sBAAIA,UAAU,iBAAd,oBAIJ,uBAAKA,UAAU,OACX,uBAAKA,UAAU,kBAAf,qHAMJ,uBAAKA,UAAU,OACX,uBAAKA,UAAU,iCACX,yBAAOY,KAAK,OAAOK,KAAK,OAAOC,GAAG,OAAOP,MAAM,SAASQ,SAAUlB,KAAKC,MAAMkB,eAC7E,yBAAOC,IAAI,QAAX,mBAGPf,EACAC,O,GA5CSV,EAAMO,WCJ5BP,EAAQC,EAAQ,GA2CLwB,E,4MAxCXC,MAAQ,CACJb,YAAa,G,EAEjBc,YAAc,WACVC,QAAQC,IAAI,yBACZ,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAAS,EAAKN,MAAMO,UACpCC,MAAM,qCAAsC,CACxCC,OAAQ,OACRC,KAAMN,IACPO,MACC,SAAAC,GACIV,QAAQC,IAAIS,GACZA,EAAKC,OAAOF,MAAK,SAAAG,GACb,EAAKC,SAAS,CACV5B,YAAa,EACbM,SAAUqB,W,EAM9BjB,aAAe,SAACmB,GACZ,EAAKD,SAAS,CACVR,SAAUS,EAAMC,OAAOC,MAAM,GAC7BC,QAASC,IAAIC,gBAAgBL,EAAMC,OAAOC,MAAM,IAChD/B,YAAa,IACd,WACC,EAAKc,kB,uDAKT,OACI,gBAAC,EAAD,CAAaJ,aAAcnB,KAAKmB,aAAcI,YAAavB,KAAKuB,YAAahB,IAAKP,KAAKsB,MAAMmB,QAAShC,YAAaT,KAAKsB,MAAMb,YAC1HM,SAAUf,KAAKsB,MAAMP,e,GApCRnB,EAAMO,WCSfyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.bcbb4e96.chunk.js","sourcesContent":["import '../styles/ResultPage.css'\nvar React = require(\"react\");\n\nclass ResultPage extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row center-div preds\">\n                    <div className=\"col-12 center-div pred-cat\"> Predicted Category: {this.props.result['category']}</div>\n                </div>\n                <div className=\"row center-div probs-outer\">\n                    <div className=\"col-12 center-div probs-title\">\n                        Probabilities for each class:\n                    </div>\n                    <div className=\"col-12 center-div probs\">\n                        Lebron: {this.props.result['probs']['lebron']}\n                    </div>\n                    <div className=\"col-12 center-div probs\">\n                        Jordan: {this.props.result['probs']['Jordan']}\n                    </div>   \n                </div>\n            </div >\n        );\n    }\n}\n\nexport default ResultPage;\n","import '../styles/LandingPage.css'\nimport ResultPage from '../components/ResultPage';\nvar React = require(\"react\");\n\n\nclass LandingPage extends React.Component {\n    render() {\n        let image, results;\n        if (this.props.img) {\n            image = <div className=\"row\"><div className=\"col-12 center-div\"><img src={this.props.img} className=\"center-div image-preview\" /></div></div>\n        } else {\n            image = <div className=\"row\"></div>\n        }\n        if (this.props.currentStep == 3) {\n            results =\n                <div className=\"row spinner\">\n                    <div className=\"col-12 center-div\">\n                        <button class=\"btn btn-primary\" type=\"button\" disabled>\n                            <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                            Detecting goat\n                        </button>\n                    </div>\n                </div>\n        } else if (this.props.currentStep == 1) {\n            results = <ResultPage result={this.props.response} />\n        } else {\n            results = <div></div>\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h1 className=\"col-12 header\">\n                        Goat Classifier\n                    </h1>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 message\">\n                        This simple model can identify the following goats using their image:\n                        Lebron or Jordan.\n                        Upload your image below:\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 center-div choose-file\">\n                        <input type=\"file\" name=\"file\" id=\"file\" class=\"choose\" onChange={this.props.handleChange} />\n                        <label for=\"file\">Choose a file</label>\n                    </div>\n                </div>\n                {image}\n                {results}\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;\n","import LandingPage from '../components/LandingPage';\nvar React = require(\"react\");\n\nclass GoatClassifier extends React.Component {\n    state = {\n        currentStep: 0\n    };\n    fetchResult = () => {\n        console.log('im gonna post request');\n        var formData = new FormData();\n        formData.append('image', this.state.img_file);\n        fetch('https://goats.onrender.com/predict', {\n            method: 'POST',\n            body: formData\n        }).then(\n            resp => {\n                console.log(resp)\n                resp.json().then(data => {\n                    this.setState({\n                        currentStep: 1,\n                        response: data\n                    });\n                });\n            }\n        );\n    };\n    handleChange = (event) => {\n        this.setState({\n            img_file: event.target.files[0],\n            img_obj: URL.createObjectURL(event.target.files[0]),\n            currentStep: 3\n        }, () => {\n            this.fetchResult()\n        })\n    };\n\n    render() {\n        return (\n            <LandingPage handleChange={this.handleChange} fetchResult={this.fetchResult} img={this.state.img_obj} currentStep={this.state.currentStep}\n                response={this.state.response} />\n        );\n    }\n}\n\nexport default GoatClassifier;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GoatClassifier from './components/GoatClassifier';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <GoatClassifier />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}